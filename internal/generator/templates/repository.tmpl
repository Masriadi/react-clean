import {
  batchDeleteWithAuth,
  fetchDataById,
  fetchPaginated,
  postWithAuth,
  putWithAuth,
} from 'src/data/sources/api/fetchApi';
import type { I{{.Entity}}Repository, {{.Entity}} } from 'src/domain/entities/{{.DirName}}/{{.Entity}}';
import type { PaginatedResponse } from 'src/domain/types/Interface';
import type { ID } from 'src/domain/types/Types';

const endpoint = '/{{.DirName}}';

const {{.Entity}}Repository: I{{.Entity}}Repository = {
  getAll: async (
    currentPage: number,
    itemsPerPage: number,
    searchTerm: string,
  ): Promise<PaginatedResponse<{{.Entity}}>> => {
    const filters: Record<string, string | number> = {
      currentPage,
      itemsPerPage,
    };

    if (searchTerm) filters.searchTerm = searchTerm;

    return fetchPaginated<{{.Entity}}>(endpoint, filters);
  },

  getById: async (id: ID): Promise<{{.Entity}}> => {
    return fetchDataById<{{.Entity}}>(endpoint, id);
  },

  create: async ({{.LowerEntity}}: {{.Entity}}): Promise<{{.Entity}}> => {
    return postWithAuth<{{.Entity}}>(endpoint, {{.LowerEntity}});
  },

  update: async (id: ID, {{.LowerEntity}}: Partial<{{.Entity}}>): Promise<{{.Entity}}> => {
    return putWithAuth<{{.Entity}}>(`${endpoint}/${id}`, {{.LowerEntity}});
  },

  batchDelete: async (ids: ID[]): Promise<ID[]> => {
    return batchDeleteWithAuth(endpoint, ids);
  },
};

export default {{.Entity}}Repository;
