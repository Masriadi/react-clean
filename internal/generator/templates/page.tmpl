import { useEffect } from 'react';
import { FiEdit, FiMoreVertical, FiPlus, FiPrinter, FiSearch, FiUserCheck } from 'react-icons/fi';
import {
  Button,
  Card,
  CardBody,
  CardFooter,
  CardHeader,
  Checkbox,
  ConfirmationAlert,
  DropdownMenu,
  Input,
  Switch,
  Table,
  TableBody,
  TableCell,
  TableDeleteSelectedItems,
  TableHeader,
  TablePaginating,
  TableRow,
  Tooltip,
} from 'pesona-ui';
import Edit{{.Entity}}Modal from 'src/presentation/components/{{.DirName}}/Edit{{.Entity}}Modal.tsx';
import {
  setEditedItem,
  toggleSelectAll,
  toggleSelectRow,
} from 'src/presentation/stores/{{.DirName}}/{{.LowerEntity}}Slice.ts';
import {
  batchDelete{{.Entity}},
  fetchAll{{.Entity}},
  update{{.Entity}},
} from 'src/presentation/stores/{{.DirName}}/{{.LowerEntity}}Thunk';
import { useBreadcrumbs } from 'src/presentation/hooks/useBreadcrumbs';
import useNewDataTable from 'src/presentation/hooks/useNewDataTable';
import { useAppDispatch, useAppSelector } from 'src/presentation/hooks/useRedux';
import { useUrlDefaultValues } from 'src/presentation/hooks/useUrlDefaultValues';

const {{.Entity}}Page: React.FC = () => {
  const dispatch = useAppDispatch();

  const { items, totalItems, selectAll, selectedIds } = useAppSelector((state) => state.{{.LowerEntity}});
  const { defaultPage, defaultItemsPerPage, defaultSearchTerm } = useUrlDefaultValues();

  const {
    currentPage,
    setCurrentPage,
    itemsPerPage,
    setItemsPerPage,
    searchTerm,
    setSearchTerm,
    showEditModal,
    setShowEditModal,
    showDeleteModal,
    setShowDeleteModal,
    startIndex,
    endIndex,
    totalPages,
  } = useNewDataTable({ defaultPage, defaultItemsPerPage, defaultSearchTerm, totalData: totalItems });

  useEffect(() => {
    dispatch(fetchAll{{.Entity}}(currentPage, itemsPerPage, searchTerm));
  }, [currentPage, dispatch, itemsPerPage, searchTerm]);

  useBreadcrumbs([
    { name: 'Home', path: '/' },
    { name: '{{.Entity}}', path: '/{{.LowerEntity}}' },
  ]);

  return (
    <>
      <div className="main">
        <div className="row">
          <div className="col-md-12">
            <Card>
              <CardHeader>
                <div className="card-header-title">
                  <FiUserCheck className="icon" />
                  <span>Semua {{.Entity}}</span>
                </div>
                <div className="search-toolbar mr-15">
                  <FiSearch className="icon" />
                  <Input
                    type="text"
                    name="search"
                    placeholder="Search..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.currentTarget.value)}
                  />
                </div>
                <div className="tools">
                  <Tooltip className="top" text="Cetak">
                    <Button className="btn btn-rounded btn-default">
                      <FiPrinter />
                    </Button>
                  </Tooltip>
                  <Tooltip className="top" text="Tambah Baru">
                    <Button
                      className="btn btn-rounded btn-info"
                      onClick={() => {
                        dispatch(setEditedItem(null));
                        setShowEditModal(true);
                      }}
                    >
                      <FiPlus />
                    </Button>
                  </Tooltip>
                </div>
              </CardHeader>
              <CardBody className="p-0">
                <Table className="card-table">
                  <TableHeader>
                    <TableRow>
                      <TableCell header={true} className="text-center w-80px">
                        <Checkbox
                          name="selectAll"
                          checked={selectAll}
                          onChange={() => dispatch(toggleSelectAll(!selectAll))}
                        />
                      </TableCell>
                      <TableCell header={true}>Name</TableCell>
                      <TableCell header={true} className="text-center w-100px">
                        Status
                      </TableCell>
                      <TableCell header={true} className="text-center w-80px">
                        #
                      </TableCell>
                    </TableRow>
                  </TableHeader>
                  <TableBody>
                    {items.length > 0 ? (
                      items.map((item, index) => (
                        <TableRow key={index}>
                          <TableCell className="text-center">
                            <Checkbox
                              name={item.id.toString()}
                              checked={selectedIds.includes(item.id)}
                              onChange={() => dispatch(toggleSelectRow(item.id))}
                            />
                          </TableCell>
                          <TableCell>{item.name}</TableCell>
                          <TableCell className="text-center">
                            <Switch
                              name="status"
                              checked={item.status ?? false}
                              onChange={(e) => {
                                dispatch(update{{.Entity}}(item.id, { status: e.target.checked }));
                              }}
                            />
                          </TableCell>
                          <TableCell className="text-center">
                            <DropdownMenu
                              items={[
                                {
                                  icon: <FiEdit className="icon" />,
                                  label: 'Edit',
                                  onClick: () => {
                                    dispatch(setEditedItem(item));
                                    setShowEditModal(true);
                                  },
                                },
                              ]}
                              position="bottom-right"
                            >
                              <Button type="button" className="btn btn-rounded">
                                <FiMoreVertical />
                              </Button>
                            </DropdownMenu>
                          </TableCell>
                        </TableRow>
                      ))
                    ) : (
                      <TableRow>
                        <TableCell colSpan={4} className="text-center">
                          No data available
                        </TableCell>
                      </TableRow>
                    )}
                  </TableBody>
                </Table>
              </CardBody>
              <CardFooter>
                {(selectedIds?.length as number) > 0 && (
                  <TableDeleteSelectedItems
                    count={selectedIds?.length ?? 0}
                    handleMultipleDelete={() => setShowDeleteModal(true)}
                  />
                )}
                <TablePaginating
                  startIndex={startIndex}
                  endIndex={endIndex}
                  currentPage={currentPage}
                  totalData={totalItems}
                  itemsPerPage={itemsPerPage}
                  setItemsPerPage={setItemsPerPage}
                  setCurrentPage={setCurrentPage}
                  totalPages={totalPages}
                />
              </CardFooter>
            </Card>
          </div>
        </div>
      </div>
      {showEditModal && <Edit{{.Entity}}Modal onClose={() => setShowEditModal(false)} />}
      {showDeleteModal && (
        <ConfirmationAlert
          message="Are you sure you want to delete this item?"
          onCancel={() => setShowDeleteModal(false)}
          onConfirm={() => {
            setShowDeleteModal(false);
            dispatch(batchDelete{{.Entity}}(selectedIds));
          }}
        />
      )}
    </>
  );
};

export default {{.Entity}}Page;
