import {{.Entity}}Repository from 'src/data/repositories/{{.DirName}}/{{.Entity}}Repository.ts';
import type { {{.Entity}} } from 'src/domain/entities/{{.DirName}}/{{.Entity}}';
import type { PaginatedResponse } from 'src/domain/types/Interface';
import type { ID } from 'src/domain/types/Types';
import {
  deleteItem,
  setEditedItem,
  setItem,
  setItems,
} from 'src/presentation/stores/{{.DirName}}/{{.LowerEntity}}Slice.ts';
import { createAsyncAction } from 'src/utils/createAsyncAction';

// Fetch all
export const fetchAll{{.Entity}} = (page: number, limit: number, search = '') =>
  createAsyncAction<PaginatedResponse<{{.Entity}}>>({
    action: () => {{.Entity}}Repository.getAll(page, limit, search),
    onSuccess: (dispatch, result) => dispatch(setItems(result)),
  });

// Fetch by ID
export const fetch{{.Entity}}ById = (id: ID) =>
  createAsyncAction<{{.Entity}}>({
    action: () => {{.Entity}}Repository.getById(id),
    onSuccess: (dispatch, result) => dispatch(setEditedItem(result)),
  });

// Create
export const create{{.Entity}} = ({{.LowerEntity}}: {{.Entity}}) =>
  createAsyncAction<{{.Entity}}>({
    action: () => {{.Entity}}Repository.create({{.LowerEntity}}),
    onSuccess: (dispatch, result) => dispatch(setItem(result)),
    successMessage: 'Data berhasil disimpan',
    rethrowError: true,
  });

// Update
export const update{{.Entity}} = (id: ID, {{.LowerEntity}}: Partial<{{.Entity}}>) =>
  createAsyncAction<{{.Entity}}>({
    action: () => {{.Entity}}Repository.update(id, {{.LowerEntity}}),
    onSuccess: (dispatch, result) => dispatch(setItem(result)),
    successMessage: 'Perubahan berhasil disimpan',
    rethrowError: true,
  });

// Batch Delete
export const batchDelete{{.Entity}} = (ids: ID[]) =>
  createAsyncAction<ID[]>({
    action: () => {{.Entity}}Repository.batchDelete(ids),
    onSuccess: (dispatch, result) => dispatch(deleteItem(result)),
    successMessage: 'Data berhasil dihapus',
  });
